{"version":3,"sources":["components/TodoList/TodoList.jsx","api/request.js","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["TodoList","todos","selectedUser","setSelectedUser","className","map","todo","key","id","classNames","completed","type","readOnly","checked","title","userId","onClick","request","url","options","fetch","then","result","ok","Error","status","statusText","json","data","CurrentUser","state","currentUser","clear","setState","props","clearUser","a","this","loadData","prevProps","user","name","email","phone","React","PureComponent","App","selectedUserId","showError","value","handleChange","event","target","renderVisibleTodos","filter","toLowerCase","includes","undefined","filteredTodos","compleated","completedFilter","titleFilter","onChange","placeholder","length","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45e04cb8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({ todos, selectedUser, setSelectedUser }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label>\n              <input type=\"checkbox\" readOnly checked={todo.completed} />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames(\n                'TodoList__user-button',\n                'button',\n                { 'TodoList__user-button--selected':\n                  selectedUser !== todo.userId },\n              )}\n              type=\"button\"\n              onClick={() => setSelectedUser(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  setSelectedUser: PropTypes.func.isRequired,\n};\n","const API_URL = `https://mate-api.herokuapp.com/`;\n\nexport const request = (url, options) => (\n  fetch(`${API_URL}${url}`, options)\n    .then((result) => {\n      if (!result.ok) {\n        throw new Error(`${result.status} - ${result.statusText}`);\n      }\n\n      return result.json();\n    })\n    .then(result => result.data)\n);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    currentUser: null,\n  }\n\n  async componentDidMount() {\n    this.loadData();\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  clear = () => {\n    this.setState({ currentUser: null });\n    this.props.clearUser(0);\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ currentUser: user });\n  }\n\n  render() {\n    const { currentUser } = this.state;\n\n    if (!currentUser) {\n      return (<p>Loading</p>);\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        {currentUser !== null && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${currentUser.id}`}</span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n            <p className=\"CurrentUser__email\">{currentUser.email}</p>\n            <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n            <button\n              type=\"button\"\n              className=\"CurrentUser__clear\"\n              onClick={this.clear}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import { request } from './request';\n\nexport const getTodos = () => request('todos');\nexport const getUser = userId => request(`users/${userId}`);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    showError: false,\n    completed: 'null',\n    title: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    if (todos !== undefined) {\n      const filteredTodos\n      = todos.filter(\n        todo => (todo.title && todo.userId && todo.compleated !== null),\n      );\n\n      this.setState({\n        todos: filteredTodos,\n      });\n    } else {\n      this.setState({ showError: true });\n    }\n  }\n\n  setSelectedUser = (value) => {\n    this.setState({ selectedUserId: value });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  renderVisibleTodos = () => {\n    const { todos, completed, title } = this.state;\n\n    return todos\n      .filter((todo) => {\n        if (completed !== 'null') {\n          return todo.completed === (completed === 'true');\n        }\n\n        return todo;\n      })\n      .filter(todo => todo.title.toLowerCase().includes(title));\n  }\n\n  render() {\n    const { selectedUserId, completedFilter, titleFilter }\n      = this.state;\n\n    return (\n      <div className=\"App\">\n        {!this.state.showError ? (\n          <>\n            <div className=\"App__sidebar\">\n              <div>\n                <select\n                  name=\"completed\"\n                  id=\"completed\"\n                  value={completedFilter}\n                  onChange={this.handleChange}\n                >\n                  <option value=\"null\">All</option>\n                  <option value>Completed</option>\n                  <option value={false}>Active</option>\n                </select>\n                <input\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  value={titleFilter}\n                  onChange={this.handleChange}\n                />\n              </div>\n              {this.state.todos.length > 0 ? (\n                <TodoList\n                  todos={this.renderVisibleTodos()}\n                  selectedUser={selectedUserId}\n                  setSelectedUser={this.setSelectedUser}\n                />\n              ) : (\n                <span>Loading...</span>\n              )}\n            </div>\n\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n                {selectedUserId ? (\n                  <CurrentUser\n                    userId={selectedUserId}\n                    clearUser={this.setSelectedUser}\n                  />\n                ) : 'No user selected'}\n              </div>\n            </div>\n          </>\n        ) : (\n          <p>Sorry, Error! Please reload page later!</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}